{"id":"node_modules/yargs/lib/completion.js","dependencies":[{"name":"/Users/rudraaiyar/Documents/hciui/package.json","includedInParent":true,"mtime":1541009997000},{"name":"/Users/rudraaiyar/Documents/hciui/node_modules/yargs/package.json","includedInParent":true,"mtime":1541009984000},{"name":"fs","loc":{"line":1,"column":19},"parent":"/Users/rudraaiyar/Documents/hciui/node_modules/yargs/lib/completion.js","resolved":"/usr/local/lib/node_modules/parcel-bundler/src/builtins/_empty.js"},{"name":"path","loc":{"line":2,"column":21},"parent":"/Users/rudraaiyar/Documents/hciui/node_modules/yargs/lib/completion.js","resolved":"/usr/local/lib/node_modules/parcel-bundler/node_modules/path-browserify/index.js"},{"name":"process","parent":"/Users/rudraaiyar/Documents/hciui/node_modules/yargs/lib/completion.js","resolved":"/usr/local/lib/node_modules/parcel-bundler/node_modules/process/browser.js"}],"generated":{"js":"var process = require(\"process\");\nconst fs = require('fs')\nconst path = require('path')\n\n// add bash completions to your\n//  yargs-powered applications.\nmodule.exports = function (yargs, usage, command) {\n  const self = {\n    completionKey: 'get-yargs-completions'\n  }\n\n  // get a list of completion commands.\n  // 'args' is the array of strings from the line to be completed\n  self.getCompletion = function (args, done) {\n    const completions = []\n    const current = args.length ? args[args.length - 1] : ''\n    const argv = yargs.parse(args, true)\n    const aliases = yargs.parsed.aliases\n\n    // a custom completion function can be provided\n    // to completion().\n    if (completionFunction) {\n      if (completionFunction.length < 3) {\n        var result = completionFunction(current, argv)\n\n        // promise based completion function.\n        if (typeof result.then === 'function') {\n          return result.then(function (list) {\n            process.nextTick(function () { done(list) })\n          }).catch(function (err) {\n            process.nextTick(function () { throw err })\n          })\n        }\n\n        // synchronous completion function.\n        return done(result)\n      } else {\n        // asynchronous completion function\n        return completionFunction(current, argv, function (completions) {\n          done(completions)\n        })\n      }\n    }\n\n    var handlers = command.getCommandHandlers()\n    for (var i = 0, ii = args.length; i < ii; ++i) {\n      if (handlers[args[i]] && handlers[args[i]].builder) {\n        return handlers[args[i]].builder(yargs.reset()).argv\n      }\n    }\n\n    if (!current.match(/^-/)) {\n      usage.getCommands().forEach(function (command) {\n        if (args.indexOf(command[0]) === -1) {\n          completions.push(command[0])\n        }\n      })\n    }\n\n    if (current.match(/^-/)) {\n      Object.keys(yargs.getOptions().key).forEach(function (key) {\n        // If the key and its aliases aren't in 'args', add the key to 'completions'\n        var keyAndAliases = [key].concat(aliases[key] || [])\n        var notInArgs = keyAndAliases.every(function (val) {\n          return args.indexOf('--' + val) === -1\n        })\n        if (notInArgs) {\n          completions.push('--' + key)\n        }\n      })\n    }\n\n    done(completions)\n  }\n\n  // generate the completion script to add to your .bashrc.\n  self.generateCompletionScript = function ($0) {\n    var script = fs.readFileSync(\n      path.resolve(__dirname, '../completion.sh.hbs'),\n      'utf-8'\n    )\n    var name = path.basename($0)\n\n    // add ./to applications not yet installed as bin.\n    if ($0.match(/\\.js$/)) $0 = './' + $0\n\n    script = script.replace(/{{app_name}}/g, name)\n    return script.replace(/{{app_path}}/g, $0)\n  }\n\n  // register a function to perform your own custom\n  // completions., this function can be either\n  // synchrnous or asynchronous.\n  var completionFunction = null\n  self.registerFunction = function (fn) {\n    completionFunction = fn\n  }\n\n  return self\n}\n","map":{"mappings":[{"source":"node_modules/yargs/lib/completion.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":86,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":87,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":88,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":89,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":90,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":91,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":92,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":93,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":94,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":95,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":96,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":97,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":98,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":99,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/yargs/lib/completion.js","original":{"line":100,"column":0},"generated":{"line":101,"column":0}}],"sources":{"node_modules/yargs/lib/completion.js":"const fs = require('fs')\nconst path = require('path')\n\n// add bash completions to your\n//  yargs-powered applications.\nmodule.exports = function (yargs, usage, command) {\n  const self = {\n    completionKey: 'get-yargs-completions'\n  }\n\n  // get a list of completion commands.\n  // 'args' is the array of strings from the line to be completed\n  self.getCompletion = function (args, done) {\n    const completions = []\n    const current = args.length ? args[args.length - 1] : ''\n    const argv = yargs.parse(args, true)\n    const aliases = yargs.parsed.aliases\n\n    // a custom completion function can be provided\n    // to completion().\n    if (completionFunction) {\n      if (completionFunction.length < 3) {\n        var result = completionFunction(current, argv)\n\n        // promise based completion function.\n        if (typeof result.then === 'function') {\n          return result.then(function (list) {\n            process.nextTick(function () { done(list) })\n          }).catch(function (err) {\n            process.nextTick(function () { throw err })\n          })\n        }\n\n        // synchronous completion function.\n        return done(result)\n      } else {\n        // asynchronous completion function\n        return completionFunction(current, argv, function (completions) {\n          done(completions)\n        })\n      }\n    }\n\n    var handlers = command.getCommandHandlers()\n    for (var i = 0, ii = args.length; i < ii; ++i) {\n      if (handlers[args[i]] && handlers[args[i]].builder) {\n        return handlers[args[i]].builder(yargs.reset()).argv\n      }\n    }\n\n    if (!current.match(/^-/)) {\n      usage.getCommands().forEach(function (command) {\n        if (args.indexOf(command[0]) === -1) {\n          completions.push(command[0])\n        }\n      })\n    }\n\n    if (current.match(/^-/)) {\n      Object.keys(yargs.getOptions().key).forEach(function (key) {\n        // If the key and its aliases aren't in 'args', add the key to 'completions'\n        var keyAndAliases = [key].concat(aliases[key] || [])\n        var notInArgs = keyAndAliases.every(function (val) {\n          return args.indexOf('--' + val) === -1\n        })\n        if (notInArgs) {\n          completions.push('--' + key)\n        }\n      })\n    }\n\n    done(completions)\n  }\n\n  // generate the completion script to add to your .bashrc.\n  self.generateCompletionScript = function ($0) {\n    var script = fs.readFileSync(\n      path.resolve(__dirname, '../completion.sh.hbs'),\n      'utf-8'\n    )\n    var name = path.basename($0)\n\n    // add ./to applications not yet installed as bin.\n    if ($0.match(/\\.js$/)) $0 = './' + $0\n\n    script = script.replace(/{{app_name}}/g, name)\n    return script.replace(/{{app_path}}/g, $0)\n  }\n\n  // register a function to perform your own custom\n  // completions., this function can be either\n  // synchrnous or asynchronous.\n  var completionFunction = null\n  self.registerFunction = function (fn) {\n    completionFunction = fn\n  }\n\n  return self\n}\n"},"lineCount":101}},"hash":"f326ecd56f05aff79e5a13884a728fd0","cacheData":{"env":{}}}