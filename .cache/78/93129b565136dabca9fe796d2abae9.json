{"id":"node_modules/yargs-parser/index.js","dependencies":[{"name":"/Users/rudraaiyar/Documents/hciui/package.json","includedInParent":true,"mtime":1541009997000},{"name":"/Users/rudraaiyar/Documents/hciui/node_modules/yargs-parser/package.json","includedInParent":true,"mtime":1541009984000},{"name":"lodash.assign","loc":{"line":1,"column":21},"parent":"/Users/rudraaiyar/Documents/hciui/node_modules/yargs-parser/index.js","resolved":"/Users/rudraaiyar/Documents/hciui/node_modules/lodash.assign/index.js"},{"name":"camelcase","loc":{"line":2,"column":24},"parent":"/Users/rudraaiyar/Documents/hciui/node_modules/yargs-parser/index.js","resolved":"/Users/rudraaiyar/Documents/hciui/node_modules/camelcase/index.js"},{"name":"path","loc":{"line":3,"column":19},"parent":"/Users/rudraaiyar/Documents/hciui/node_modules/yargs-parser/index.js","resolved":"/usr/local/lib/node_modules/parcel-bundler/node_modules/path-browserify/index.js"},{"name":"./lib/tokenize-arg-string","loc":{"line":4,"column":32},"parent":"/Users/rudraaiyar/Documents/hciui/node_modules/yargs-parser/index.js","resolved":"/Users/rudraaiyar/Documents/hciui/node_modules/yargs-parser/lib/tokenize-arg-string.js"},{"name":"util","loc":{"line":5,"column":19},"parent":"/Users/rudraaiyar/Documents/hciui/node_modules/yargs-parser/index.js","resolved":"/usr/local/lib/node_modules/parcel-bundler/node_modules/util/util.js"},{"name":"process","parent":"/Users/rudraaiyar/Documents/hciui/node_modules/yargs-parser/index.js","resolved":"/usr/local/lib/node_modules/parcel-bundler/node_modules/process/browser.js"}],"generated":{"js":"var process = require(\"process\");\nvar assign = require('lodash.assign')\nvar camelCase = require('camelcase')\nvar path = require('path')\nvar tokenizeArgString = require('./lib/tokenize-arg-string')\nvar util = require('util')\n\nfunction parse (args, opts) {\n  if (!opts) opts = {}\n  // allow a string argument to be passed in rather\n  // than an argv array.\n  args = tokenizeArgString(args)\n  // aliases might have transitive relationships, normalize this.\n  var aliases = combineAliases(opts.alias || {})\n  var configuration = assign({}, {\n    'short-option-groups': true,\n    'camel-case-expansion': true,\n    'dot-notation': true,\n    'parse-numbers': true,\n    'boolean-negation': true\n  }, opts.configuration)\n  var defaults = opts.default || {}\n  var configObjects = opts.configObjects || []\n  var envPrefix = opts.envPrefix\n  var newAliases = {}\n  // allow a i18n handler to be passed in, default to a fake one (util.format).\n  var __ = opts.__ || function (str) {\n    return util.format.apply(util, Array.prototype.slice.call(arguments))\n  }\n  var error = null\n  var flags = {\n    aliases: {},\n    arrays: {},\n    bools: {},\n    strings: {},\n    numbers: {},\n    counts: {},\n    normalize: {},\n    configs: {},\n    defaulted: {},\n    nargs: {},\n    coercions: {}\n  }\n  var negative = /^-[0-9]+(\\.[0-9]+)?/\n\n  ;[].concat(opts.array).filter(Boolean).forEach(function (key) {\n    flags.arrays[key] = true\n  })\n\n  ;[].concat(opts.boolean).filter(Boolean).forEach(function (key) {\n    flags.bools[key] = true\n  })\n\n  ;[].concat(opts.string).filter(Boolean).forEach(function (key) {\n    flags.strings[key] = true\n  })\n\n  ;[].concat(opts.number).filter(Boolean).forEach(function (key) {\n    flags.numbers[key] = true\n  })\n\n  ;[].concat(opts.count).filter(Boolean).forEach(function (key) {\n    flags.counts[key] = true\n  })\n\n  ;[].concat(opts.normalize).filter(Boolean).forEach(function (key) {\n    flags.normalize[key] = true\n  })\n\n  Object.keys(opts.narg || {}).forEach(function (k) {\n    flags.nargs[k] = opts.narg[k]\n  })\n\n  Object.keys(opts.coerce || {}).forEach(function (k) {\n    flags.coercions[k] = opts.coerce[k]\n  })\n\n  if (Array.isArray(opts.config) || typeof opts.config === 'string') {\n    ;[].concat(opts.config).filter(Boolean).forEach(function (key) {\n      flags.configs[key] = true\n    })\n  } else {\n    Object.keys(opts.config || {}).forEach(function (k) {\n      flags.configs[k] = opts.config[k]\n    })\n  }\n\n  // create a lookup table that takes into account all\n  // combinations of aliases: {f: ['foo'], foo: ['f']}\n  extendAliases(opts.key, aliases, opts.default, flags.arrays)\n\n  // apply default values to all aliases.\n  Object.keys(defaults).forEach(function (key) {\n    (flags.aliases[key] || []).forEach(function (alias) {\n      defaults[alias] = defaults[key]\n    })\n  })\n\n  var argv = { _: [] }\n\n  Object.keys(flags.bools).forEach(function (key) {\n    setArg(key, !(key in defaults) ? false : defaults[key])\n    setDefaulted(key)\n  })\n\n  var notFlags = []\n  if (args.indexOf('--') !== -1) {\n    notFlags = args.slice(args.indexOf('--') + 1)\n    args = args.slice(0, args.indexOf('--'))\n  }\n\n  for (var i = 0; i < args.length; i++) {\n    var arg = args[i]\n    var broken\n    var key\n    var letters\n    var m\n    var next\n    var value\n\n    // -- seperated by =\n    if (arg.match(/^--.+=/) || (\n      !configuration['short-option-groups'] && arg.match(/^-.+=/)\n    )) {\n      // Using [\\s\\S] instead of . because js doesn't support the\n      // 'dotall' regex modifier. See:\n      // http://stackoverflow.com/a/1068308/13216\n      m = arg.match(/^--?([^=]+)=([\\s\\S]*)$/)\n\n      // nargs format = '--f=monkey washing cat'\n      if (checkAllAliases(m[1], flags.nargs)) {\n        args.splice(i + 1, 0, m[2])\n        i = eatNargs(i, m[1], args)\n      // arrays format = '--f=a b c'\n      } else if (checkAllAliases(m[1], flags.arrays) && args.length > i + 1) {\n        args.splice(i + 1, 0, m[2])\n        i = eatArray(i, m[1], args)\n      } else {\n        setArg(m[1], m[2])\n      }\n    } else if (arg.match(/^--no-.+/) && configuration['boolean-negation']) {\n      key = arg.match(/^--no-(.+)/)[1]\n      setArg(key, false)\n\n    // -- seperated by space.\n    } else if (arg.match(/^--.+/) || (\n      !configuration['short-option-groups'] && arg.match(/^-.+/)\n    )) {\n      key = arg.match(/^--?(.+)/)[1]\n\n      // nargs format = '--foo a b c'\n      if (checkAllAliases(key, flags.nargs)) {\n        i = eatNargs(i, key, args)\n      // array format = '--foo a b c'\n      } else if (checkAllAliases(key, flags.arrays) && args.length > i + 1) {\n        i = eatArray(i, key, args)\n      } else {\n        next = args[i + 1]\n\n        if (next !== undefined && (!next.match(/^-/) ||\n          next.match(negative)) &&\n          !checkAllAliases(key, flags.bools) &&\n          !checkAllAliases(key, flags.counts)) {\n          setArg(key, next)\n          i++\n        } else if (/^(true|false)$/.test(next)) {\n          setArg(key, next)\n          i++\n        } else {\n          setArg(key, defaultForType(guessType(key, flags)))\n        }\n      }\n\n    // dot-notation flag seperated by '='.\n    } else if (arg.match(/^-.\\..+=/)) {\n      m = arg.match(/^-([^=]+)=([\\s\\S]*)$/)\n      setArg(m[1], m[2])\n\n    // dot-notation flag seperated by space.\n    } else if (arg.match(/^-.\\..+/)) {\n      next = args[i + 1]\n      key = arg.match(/^-(.\\..+)/)[1]\n\n      if (next !== undefined && !next.match(/^-/) &&\n        !checkAllAliases(key, flags.bools) &&\n        !checkAllAliases(key, flags.counts)) {\n        setArg(key, next)\n        i++\n      } else {\n        setArg(key, defaultForType(guessType(key, flags)))\n      }\n    } else if (arg.match(/^-[^-]+/) && !arg.match(negative)) {\n      letters = arg.slice(1, -1).split('')\n      broken = false\n\n      for (var j = 0; j < letters.length; j++) {\n        next = arg.slice(j + 2)\n\n        if (letters[j + 1] && letters[j + 1] === '=') {\n          value = arg.slice(j + 3)\n          key = letters[j]\n\n          // nargs format = '-f=monkey washing cat'\n          if (checkAllAliases(key, flags.nargs)) {\n            args.splice(i + 1, 0, value)\n            i = eatNargs(i, key, args)\n          // array format = '-f=a b c'\n          } else if (checkAllAliases(key, flags.arrays) && args.length > i + 1) {\n            args.splice(i + 1, 0, value)\n            i = eatArray(i, key, args)\n          } else {\n            setArg(key, value)\n          }\n\n          broken = true\n          break\n        }\n\n        if (next === '-') {\n          setArg(letters[j], next)\n          continue\n        }\n\n        // current letter is an alphabetic character and next value is a number\n        if (/[A-Za-z]/.test(letters[j]) &&\n          /^-?\\d+(\\.\\d*)?(e-?\\d+)?$/.test(next)) {\n          setArg(letters[j], next)\n          broken = true\n          break\n        }\n\n        if (letters[j + 1] && letters[j + 1].match(/\\W/)) {\n          setArg(letters[j], next)\n          broken = true\n          break\n        } else {\n          setArg(letters[j], defaultForType(guessType(letters[j], flags)))\n        }\n      }\n\n      key = arg.slice(-1)[0]\n\n      if (!broken && key !== '-') {\n        // nargs format = '-f a b c'\n        if (checkAllAliases(key, flags.nargs)) {\n          i = eatNargs(i, key, args)\n        // array format = '-f a b c'\n        } else if (checkAllAliases(key, flags.arrays) && args.length > i + 1) {\n          i = eatArray(i, key, args)\n        } else {\n          next = args[i + 1]\n\n          if (next !== undefined && (!/^(-|--)[^-]/.test(next) ||\n            next.match(negative)) &&\n            !checkAllAliases(key, flags.bools) &&\n            !checkAllAliases(key, flags.counts)) {\n            setArg(key, next)\n            i++\n          } else if (/^(true|false)$/.test(next)) {\n            setArg(key, next)\n            i++\n          } else {\n            setArg(key, defaultForType(guessType(key, flags)))\n          }\n        }\n      }\n    } else {\n      argv._.push(\n        flags.strings['_'] || !isNumber(arg) ? arg : Number(arg)\n      )\n    }\n  }\n\n  // order of precedence:\n  // 1. command line arg\n  // 2. value from config file\n  // 3. value from config objects\n  // 4. value from env var\n  // 5. configured default value\n  applyEnvVars(argv, true) // special case: check env vars that point to config file\n  setConfig(argv)\n  setConfigObjects()\n  applyEnvVars(argv, false)\n  applyArrayCoercions(argv)\n  applyDefaultsAndAliases(argv, flags.aliases, defaults)\n\n  // for any counts either not in args or without an explicit default, set to 0\n  Object.keys(flags.counts).forEach(function (key) {\n    if (!hasKey(argv, key.split('.'))) setArg(key, 0)\n  })\n\n  notFlags.forEach(function (key) {\n    argv._.push(key)\n  })\n\n  // how many arguments should we consume, based\n  // on the nargs option?\n  function eatNargs (i, key, args) {\n    var toEat = checkAllAliases(key, flags.nargs)\n\n    if (args.length - (i + 1) < toEat) error = Error(__('Not enough arguments following: %s', key))\n\n    for (var ii = i + 1; ii < (toEat + i + 1); ii++) {\n      setArg(key, args[ii])\n    }\n\n    return (i + toEat)\n  }\n\n  // if an option is an array, eat all non-hyphenated arguments\n  // following it... YUM!\n  // e.g., --foo apple banana cat becomes [\"apple\", \"banana\", \"cat\"]\n  function eatArray (i, key, args) {\n    var start = i + 1\n    for (var ii = i + 1; ii < args.length; ii++) {\n      if (/^-/.test(args[ii]) && !negative.test(args[ii])) {\n        if (ii === start) {\n          setArg(key, defaultForType('array'))\n        }\n        break\n      }\n      i = ii\n      setArg(key, args[ii])\n    }\n\n    return i\n  }\n\n  function setArg (key, val) {\n    unsetDefaulted(key)\n\n    // handle parsing boolean arguments --foo=true --bar false.\n    if (checkAllAliases(key, flags.bools) || checkAllAliases(key, flags.counts)) {\n      if (typeof val === 'string') val = val === 'true'\n    }\n\n    if (/-/.test(key) && !(flags.aliases[key] && flags.aliases[key].length) && configuration['camel-case-expansion']) {\n      var c = camelCase(key)\n      flags.aliases[key] = [c]\n      newAliases[c] = true\n    }\n\n    var value = val\n    if (!checkAllAliases(key, flags.strings) && !checkAllAliases(key, flags.coercions)) {\n      if (isNumber(val)) value = Number(val)\n      if (!isUndefined(val) && !isNumber(val) && checkAllAliases(key, flags.numbers)) value = NaN\n    }\n\n    // increment a count given as arg (either no value or value parsed as boolean)\n    if (checkAllAliases(key, flags.counts) && (isUndefined(value) || typeof value === 'boolean')) {\n      value = increment\n    }\n\n    // Set normalized value when key is in 'normalize' and in 'arrays'\n    if (checkAllAliases(key, flags.normalize) && checkAllAliases(key, flags.arrays)) {\n      if (Array.isArray(val)) value = val.map(path.normalize)\n      else value = path.normalize(val)\n    }\n\n    var splitKey = key.split('.')\n    setKey(argv, splitKey, value)\n\n    // handle populating aliases of the full key\n    if (flags.aliases[key]) {\n      flags.aliases[key].forEach(function (x) {\n        x = x.split('.')\n        setKey(argv, x, value)\n      })\n    }\n\n    // handle populating aliases of the first element of the dot-notation key\n    if (splitKey.length > 1 && configuration['dot-notation']) {\n      ;(flags.aliases[splitKey[0]] || []).forEach(function (x) {\n        x = x.split('.')\n\n        // expand alias with nested objects in key\n        var a = [].concat(splitKey)\n        a.shift() // nuke the old key.\n        x = x.concat(a)\n\n        setKey(argv, x, value)\n      })\n    }\n\n    // Set normalize getter and setter when key is in 'normalize' but isn't an array\n    if (checkAllAliases(key, flags.normalize) && !checkAllAliases(key, flags.arrays)) {\n      var keys = [key].concat(flags.aliases[key] || [])\n      keys.forEach(function (key) {\n        argv.__defineSetter__(key, function (v) {\n          val = path.normalize(v)\n        })\n\n        argv.__defineGetter__(key, function () {\n          return typeof val === 'string' ? path.normalize(val) : val\n        })\n      })\n    }\n  }\n\n  // set args from config.json file, this should be\n  // applied last so that defaults can be applied.\n  function setConfig (argv) {\n    var configLookup = {}\n\n    // expand defaults/aliases, in-case any happen to reference\n    // the config.json file.\n    applyDefaultsAndAliases(configLookup, flags.aliases, defaults)\n\n    Object.keys(flags.configs).forEach(function (configKey) {\n      var configPath = argv[configKey] || configLookup[configKey]\n      if (configPath) {\n        try {\n          var config = null\n          var resolvedConfigPath = path.resolve(process.cwd(), configPath)\n\n          if (typeof flags.configs[configKey] === 'function') {\n            try {\n              config = flags.configs[configKey](resolvedConfigPath)\n            } catch (e) {\n              config = e\n            }\n            if (config instanceof Error) {\n              error = config\n              return\n            }\n          } else {\n            config = require(resolvedConfigPath)\n          }\n\n          setConfigObject(config)\n        } catch (ex) {\n          if (argv[configKey]) error = Error(__('Invalid JSON config file: %s', configPath))\n        }\n      }\n    })\n  }\n\n  // set args from config object.\n  // it recursively checks nested objects.\n  function setConfigObject (config, prev) {\n    Object.keys(config).forEach(function (key) {\n      var value = config[key]\n      var fullKey = prev ? prev + '.' + key : key\n\n      if (Object.prototype.toString.call(value) === '[object Object]') {\n        // if the value is an object but not an array, check nested object\n        setConfigObject(value, fullKey)\n      } else {\n        // setting arguments via CLI takes precedence over\n        // values within the config file.\n        if (!hasKey(argv, fullKey.split('.')) || (flags.defaulted[fullKey])) {\n          setArg(fullKey, value)\n        }\n      }\n    })\n  }\n\n  // set all config objects passed in opts\n  function setConfigObjects () {\n    if (typeof configObjects === 'undefined') return\n    configObjects.forEach(function (configObject) {\n      setConfigObject(configObject)\n    })\n  }\n\n  function applyEnvVars (argv, configOnly) {\n    if (typeof envPrefix === 'undefined') return\n\n    var prefix = typeof envPrefix === 'string' ? envPrefix : ''\n    Object.keys(process.env).forEach(function (envVar) {\n      if (prefix === '' || envVar.lastIndexOf(prefix, 0) === 0) {\n        // get array of nested keys and convert them to camel case\n        var keys = envVar.split('__').map(function (key, i) {\n          if (i === 0) {\n            key = key.substring(prefix.length)\n          }\n          return camelCase(key)\n        })\n\n        if (((configOnly && flags.configs[keys.join('.')]) || !configOnly) && (!hasKey(argv, keys) || flags.defaulted[keys.join('.')])) {\n          setArg(keys.join('.'), process.env[envVar])\n        }\n      }\n    })\n  }\n\n  function applyArrayCoercions (argv) {\n    var coerce\n    Object.keys(argv).filter(function (key) {\n      return key === '_' || checkAllAliases(key, flags.arrays)\n    }).forEach(function (key) {\n      coerce = checkAllAliases(key, flags.coercions)\n      if (typeof coerce === 'function') {\n        try {\n          argv[key] = coerce(argv[key])\n        } catch (err) {\n          error = err\n        }\n      }\n    })\n  }\n\n  function applyDefaultsAndAliases (obj, aliases, defaults) {\n    Object.keys(defaults).forEach(function (key) {\n      if (!hasKey(obj, key.split('.'))) {\n        setKey(obj, key.split('.'), defaults[key])\n\n        ;(aliases[key] || []).forEach(function (x) {\n          if (hasKey(obj, x.split('.'))) return\n          setKey(obj, x.split('.'), defaults[key])\n        })\n      }\n    })\n  }\n\n  function hasKey (obj, keys) {\n    var o = obj\n\n    if (!configuration['dot-notation']) keys = [keys.join('.')]\n\n    keys.slice(0, -1).forEach(function (key) {\n      o = (o[key] || {})\n    })\n\n    var key = keys[keys.length - 1]\n\n    if (typeof o !== 'object') return false\n    else return key in o\n  }\n\n  function setKey (obj, keys, value) {\n    var o = obj\n\n    if (!configuration['dot-notation']) keys = [keys.join('.')]\n\n    keys.slice(0, -1).forEach(function (key) {\n      if (o[key] === undefined) o[key] = {}\n      o = o[key]\n    })\n\n    var key = keys[keys.length - 1]\n    var coerce = !checkAllAliases(key, flags.arrays) && checkAllAliases(key, flags.coercions)\n    if (typeof coerce === 'function') {\n      try {\n        value = coerce(value)\n      } catch (err) {\n        error = err\n      }\n    }\n\n    if (value === increment) {\n      o[key] = increment(o[key])\n    } else if (o[key] === undefined && checkAllAliases(key, flags.arrays)) {\n      o[key] = Array.isArray(value) ? value : [value]\n    } else if (o[key] === undefined || checkAllAliases(key, flags.bools) || checkAllAliases(key, flags.counts)) {\n      o[key] = value\n    } else if (Array.isArray(o[key])) {\n      o[key].push(value)\n    } else {\n      o[key] = [ o[key], value ]\n    }\n  }\n\n  // extend the aliases list with inferred aliases.\n  function extendAliases () {\n    Array.prototype.slice.call(arguments).forEach(function (obj) {\n      Object.keys(obj || {}).forEach(function (key) {\n        // short-circuit if we've already added a key\n        // to the aliases array, for example it might\n        // exist in both 'opts.default' and 'opts.key'.\n        if (flags.aliases[key]) return\n\n        flags.aliases[key] = [].concat(aliases[key] || [])\n        // For \"--option-name\", also set argv.optionName\n        flags.aliases[key].concat(key).forEach(function (x) {\n          if (/-/.test(x) && configuration['camel-case-expansion']) {\n            var c = camelCase(x)\n            flags.aliases[key].push(c)\n            newAliases[c] = true\n          }\n        })\n        flags.aliases[key].forEach(function (x) {\n          flags.aliases[x] = [key].concat(flags.aliases[key].filter(function (y) {\n            return x !== y\n          }))\n        })\n      })\n    })\n  }\n\n  // check if a flag is set for any of a key's aliases.\n  function checkAllAliases (key, flag) {\n    var isSet = false\n    var toCheck = [].concat(flags.aliases[key] || [], key)\n\n    toCheck.forEach(function (key) {\n      if (flag[key]) isSet = flag[key]\n    })\n\n    return isSet\n  }\n\n  function setDefaulted (key) {\n    [].concat(flags.aliases[key] || [], key).forEach(function (k) {\n      flags.defaulted[k] = true\n    })\n  }\n\n  function unsetDefaulted (key) {\n    [].concat(flags.aliases[key] || [], key).forEach(function (k) {\n      delete flags.defaulted[k]\n    })\n  }\n\n  // return a default value, given the type of a flag.,\n  // e.g., key of type 'string' will default to '', rather than 'true'.\n  function defaultForType (type) {\n    var def = {\n      boolean: true,\n      string: '',\n      number: undefined,\n      array: []\n    }\n\n    return def[type]\n  }\n\n  // given a flag, enforce a default type.\n  function guessType (key, flags) {\n    var type = 'boolean'\n\n    if (checkAllAliases(key, flags.strings)) type = 'string'\n    else if (checkAllAliases(key, flags.numbers)) type = 'number'\n    else if (checkAllAliases(key, flags.arrays)) type = 'array'\n\n    return type\n  }\n\n  function isNumber (x) {\n    if (!configuration['parse-numbers']) return false\n    if (typeof x === 'number') return true\n    if (/^0x[0-9a-f]+$/i.test(x)) return true\n    return /^[-+]?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(e[-+]?\\d+)?$/.test(x)\n  }\n\n  function isUndefined (num) {\n    return num === undefined\n  }\n\n  return {\n    argv: argv,\n    error: error,\n    aliases: flags.aliases,\n    newAliases: newAliases,\n    configuration: configuration\n  }\n}\n\n// if any aliases reference each other, we should\n// merge them together.\nfunction combineAliases (aliases) {\n  var aliasArrays = []\n  var change = true\n  var combined = {}\n\n  // turn alias lookup hash {key: ['alias1', 'alias2']} into\n  // a simple array ['key', 'alias1', 'alias2']\n  Object.keys(aliases).forEach(function (key) {\n    aliasArrays.push(\n      [].concat(aliases[key], key)\n    )\n  })\n\n  // combine arrays until zero changes are\n  // made in an iteration.\n  while (change) {\n    change = false\n    for (var i = 0; i < aliasArrays.length; i++) {\n      for (var ii = i + 1; ii < aliasArrays.length; ii++) {\n        var intersect = aliasArrays[i].filter(function (v) {\n          return aliasArrays[ii].indexOf(v) !== -1\n        })\n\n        if (intersect.length) {\n          aliasArrays[i] = aliasArrays[i].concat(aliasArrays[ii])\n          aliasArrays.splice(ii, 1)\n          change = true\n          break\n        }\n      }\n    }\n  }\n\n  // map arrays back to the hash-lookup (de-dupe while\n  // we're at it).\n  aliasArrays.forEach(function (aliasArray) {\n    aliasArray = aliasArray.filter(function (v, i, self) {\n      return self.indexOf(v) === i\n    })\n    combined[aliasArray.pop()] = aliasArray\n  })\n\n  return combined\n}\n\n// this function should only be called when a count is given as an arg\n// it is NOT called to set a default value\n// thus we can start the count at 1 instead of 0\nfunction increment (orig) {\n  return orig !== undefined ? orig + 1 : 1\n}\n\nfunction Parser (args, opts) {\n  var result = parse(args.slice(), opts)\n\n  return result.argv\n}\n\n// parse arguments and return detailed\n// meta information, aliases, etc.\nParser.detailed = function (args, opts) {\n  return parse(args.slice(), opts)\n}\n\nmodule.exports = Parser\n","map":{"mappings":[{"source":"node_modules/yargs-parser/index.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":86,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":87,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":88,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":89,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":90,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":91,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":92,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":93,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":94,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":95,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":96,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":97,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":98,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":99,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":100,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":101,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":102,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":103,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":104,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":105,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":106,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":107,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":108,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":109,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":110,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":111,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":112,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":113,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":114,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":115,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":116,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":117,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":118,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":119,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":120,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":121,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":122,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":123,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":124,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":125,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":126,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":127,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":128,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":129,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":130,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":131,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":132,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":133,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":134,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":135,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":136,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":137,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":138,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":139,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":140,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":141,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":142,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":143,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":144,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":145,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":146,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":147,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":148,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":149,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":150,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":151,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":152,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":153,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":154,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":155,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":156,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":157,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":158,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":159,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":160,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":161,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":162,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":163,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":164,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":165,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":166,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":167,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":168,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":169,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":170,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":171,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":172,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":173,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":174,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":175,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":176,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":177,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":178,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":179,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":180,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":181,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":182,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":183,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":184,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":185,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":186,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":187,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":188,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":189,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":190,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":191,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":192,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":193,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":194,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":195,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":196,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":197,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":198,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":199,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":200,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":201,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":202,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":203,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":204,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":205,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":206,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":207,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":208,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":209,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":210,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":211,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":212,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":213,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":214,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":215,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":216,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":217,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":218,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":219,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":220,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":221,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":222,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":223,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":224,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":225,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":226,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":227,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":228,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":229,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":230,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":231,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":232,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":233,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":234,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":235,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":236,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":237,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":238,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":239,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":240,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":241,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":242,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":243,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":244,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":245,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":246,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":247,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":248,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":249,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":250,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":251,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":252,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":253,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":254,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":255,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":256,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":257,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":258,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":259,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":260,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":261,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":262,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":263,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":264,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":265,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":266,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":267,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":268,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":269,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":270,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":271,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":272,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":273,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":274,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":275,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":276,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":277,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":278,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":279,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":280,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":281,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":282,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":283,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":284,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":285,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":286,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":287,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":288,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":289,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":290,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":291,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":292,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":293,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":294,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":295,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":296,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":297,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":298,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":299,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":300,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":301,"column":0},"generated":{"line":302,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":302,"column":0},"generated":{"line":303,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":303,"column":0},"generated":{"line":304,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":304,"column":0},"generated":{"line":305,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":305,"column":0},"generated":{"line":306,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":306,"column":0},"generated":{"line":307,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":307,"column":0},"generated":{"line":308,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":308,"column":0},"generated":{"line":309,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":309,"column":0},"generated":{"line":310,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":310,"column":0},"generated":{"line":311,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":311,"column":0},"generated":{"line":312,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":312,"column":0},"generated":{"line":313,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":313,"column":0},"generated":{"line":314,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":314,"column":0},"generated":{"line":315,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":315,"column":0},"generated":{"line":316,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":316,"column":0},"generated":{"line":317,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":317,"column":0},"generated":{"line":318,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":318,"column":0},"generated":{"line":319,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":319,"column":0},"generated":{"line":320,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":320,"column":0},"generated":{"line":321,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":321,"column":0},"generated":{"line":322,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":322,"column":0},"generated":{"line":323,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":323,"column":0},"generated":{"line":324,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":324,"column":0},"generated":{"line":325,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":325,"column":0},"generated":{"line":326,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":326,"column":0},"generated":{"line":327,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":327,"column":0},"generated":{"line":328,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":328,"column":0},"generated":{"line":329,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":329,"column":0},"generated":{"line":330,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":330,"column":0},"generated":{"line":331,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":331,"column":0},"generated":{"line":332,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":332,"column":0},"generated":{"line":333,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":333,"column":0},"generated":{"line":334,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":334,"column":0},"generated":{"line":335,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":335,"column":0},"generated":{"line":336,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":336,"column":0},"generated":{"line":337,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":337,"column":0},"generated":{"line":338,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":338,"column":0},"generated":{"line":339,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":339,"column":0},"generated":{"line":340,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":340,"column":0},"generated":{"line":341,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":341,"column":0},"generated":{"line":342,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":342,"column":0},"generated":{"line":343,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":343,"column":0},"generated":{"line":344,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":344,"column":0},"generated":{"line":345,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":345,"column":0},"generated":{"line":346,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":346,"column":0},"generated":{"line":347,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":347,"column":0},"generated":{"line":348,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":348,"column":0},"generated":{"line":349,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":349,"column":0},"generated":{"line":350,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":350,"column":0},"generated":{"line":351,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":351,"column":0},"generated":{"line":352,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":352,"column":0},"generated":{"line":353,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":353,"column":0},"generated":{"line":354,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":354,"column":0},"generated":{"line":355,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":355,"column":0},"generated":{"line":356,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":356,"column":0},"generated":{"line":357,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":357,"column":0},"generated":{"line":358,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":358,"column":0},"generated":{"line":359,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":359,"column":0},"generated":{"line":360,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":360,"column":0},"generated":{"line":361,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":361,"column":0},"generated":{"line":362,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":362,"column":0},"generated":{"line":363,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":363,"column":0},"generated":{"line":364,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":364,"column":0},"generated":{"line":365,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":365,"column":0},"generated":{"line":366,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":366,"column":0},"generated":{"line":367,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":367,"column":0},"generated":{"line":368,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":368,"column":0},"generated":{"line":369,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":369,"column":0},"generated":{"line":370,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":370,"column":0},"generated":{"line":371,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":371,"column":0},"generated":{"line":372,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":372,"column":0},"generated":{"line":373,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":373,"column":0},"generated":{"line":374,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":374,"column":0},"generated":{"line":375,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":375,"column":0},"generated":{"line":376,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":376,"column":0},"generated":{"line":377,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":377,"column":0},"generated":{"line":378,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":378,"column":0},"generated":{"line":379,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":379,"column":0},"generated":{"line":380,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":380,"column":0},"generated":{"line":381,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":381,"column":0},"generated":{"line":382,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":382,"column":0},"generated":{"line":383,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":383,"column":0},"generated":{"line":384,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":384,"column":0},"generated":{"line":385,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":385,"column":0},"generated":{"line":386,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":386,"column":0},"generated":{"line":387,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":387,"column":0},"generated":{"line":388,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":388,"column":0},"generated":{"line":389,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":389,"column":0},"generated":{"line":390,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":390,"column":0},"generated":{"line":391,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":391,"column":0},"generated":{"line":392,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":392,"column":0},"generated":{"line":393,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":393,"column":0},"generated":{"line":394,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":394,"column":0},"generated":{"line":395,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":395,"column":0},"generated":{"line":396,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":396,"column":0},"generated":{"line":397,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":397,"column":0},"generated":{"line":398,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":398,"column":0},"generated":{"line":399,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":399,"column":0},"generated":{"line":400,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":400,"column":0},"generated":{"line":401,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":401,"column":0},"generated":{"line":402,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":402,"column":0},"generated":{"line":403,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":403,"column":0},"generated":{"line":404,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":404,"column":0},"generated":{"line":405,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":405,"column":0},"generated":{"line":406,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":406,"column":0},"generated":{"line":407,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":407,"column":0},"generated":{"line":408,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":408,"column":0},"generated":{"line":409,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":409,"column":0},"generated":{"line":410,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":410,"column":0},"generated":{"line":411,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":411,"column":0},"generated":{"line":412,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":412,"column":0},"generated":{"line":413,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":413,"column":0},"generated":{"line":414,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":414,"column":0},"generated":{"line":415,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":415,"column":0},"generated":{"line":416,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":416,"column":0},"generated":{"line":417,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":417,"column":0},"generated":{"line":418,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":418,"column":0},"generated":{"line":419,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":419,"column":0},"generated":{"line":420,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":420,"column":0},"generated":{"line":421,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":421,"column":0},"generated":{"line":422,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":422,"column":0},"generated":{"line":423,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":423,"column":0},"generated":{"line":424,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":424,"column":0},"generated":{"line":425,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":425,"column":0},"generated":{"line":426,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":426,"column":0},"generated":{"line":427,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":427,"column":0},"generated":{"line":428,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":428,"column":0},"generated":{"line":429,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":429,"column":0},"generated":{"line":430,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":430,"column":0},"generated":{"line":431,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":431,"column":0},"generated":{"line":432,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":432,"column":0},"generated":{"line":433,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":433,"column":0},"generated":{"line":434,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":434,"column":0},"generated":{"line":435,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":435,"column":0},"generated":{"line":436,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":436,"column":0},"generated":{"line":437,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":437,"column":0},"generated":{"line":438,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":438,"column":0},"generated":{"line":439,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":439,"column":0},"generated":{"line":440,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":440,"column":0},"generated":{"line":441,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":441,"column":0},"generated":{"line":442,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":442,"column":0},"generated":{"line":443,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":443,"column":0},"generated":{"line":444,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":444,"column":0},"generated":{"line":445,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":445,"column":0},"generated":{"line":446,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":446,"column":0},"generated":{"line":447,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":447,"column":0},"generated":{"line":448,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":448,"column":0},"generated":{"line":449,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":449,"column":0},"generated":{"line":450,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":450,"column":0},"generated":{"line":451,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":451,"column":0},"generated":{"line":452,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":452,"column":0},"generated":{"line":453,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":453,"column":0},"generated":{"line":454,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":454,"column":0},"generated":{"line":455,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":455,"column":0},"generated":{"line":456,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":456,"column":0},"generated":{"line":457,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":457,"column":0},"generated":{"line":458,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":458,"column":0},"generated":{"line":459,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":459,"column":0},"generated":{"line":460,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":460,"column":0},"generated":{"line":461,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":461,"column":0},"generated":{"line":462,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":462,"column":0},"generated":{"line":463,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":463,"column":0},"generated":{"line":464,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":464,"column":0},"generated":{"line":465,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":465,"column":0},"generated":{"line":466,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":466,"column":0},"generated":{"line":467,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":467,"column":0},"generated":{"line":468,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":468,"column":0},"generated":{"line":469,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":469,"column":0},"generated":{"line":470,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":470,"column":0},"generated":{"line":471,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":471,"column":0},"generated":{"line":472,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":472,"column":0},"generated":{"line":473,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":473,"column":0},"generated":{"line":474,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":474,"column":0},"generated":{"line":475,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":475,"column":0},"generated":{"line":476,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":476,"column":0},"generated":{"line":477,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":477,"column":0},"generated":{"line":478,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":478,"column":0},"generated":{"line":479,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":479,"column":0},"generated":{"line":480,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":480,"column":0},"generated":{"line":481,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":481,"column":0},"generated":{"line":482,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":482,"column":0},"generated":{"line":483,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":483,"column":0},"generated":{"line":484,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":484,"column":0},"generated":{"line":485,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":485,"column":0},"generated":{"line":486,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":486,"column":0},"generated":{"line":487,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":487,"column":0},"generated":{"line":488,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":488,"column":0},"generated":{"line":489,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":489,"column":0},"generated":{"line":490,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":490,"column":0},"generated":{"line":491,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":491,"column":0},"generated":{"line":492,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":492,"column":0},"generated":{"line":493,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":493,"column":0},"generated":{"line":494,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":494,"column":0},"generated":{"line":495,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":495,"column":0},"generated":{"line":496,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":496,"column":0},"generated":{"line":497,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":497,"column":0},"generated":{"line":498,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":498,"column":0},"generated":{"line":499,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":499,"column":0},"generated":{"line":500,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":500,"column":0},"generated":{"line":501,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":501,"column":0},"generated":{"line":502,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":502,"column":0},"generated":{"line":503,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":503,"column":0},"generated":{"line":504,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":504,"column":0},"generated":{"line":505,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":505,"column":0},"generated":{"line":506,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":506,"column":0},"generated":{"line":507,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":507,"column":0},"generated":{"line":508,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":508,"column":0},"generated":{"line":509,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":509,"column":0},"generated":{"line":510,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":510,"column":0},"generated":{"line":511,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":511,"column":0},"generated":{"line":512,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":512,"column":0},"generated":{"line":513,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":513,"column":0},"generated":{"line":514,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":514,"column":0},"generated":{"line":515,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":515,"column":0},"generated":{"line":516,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":516,"column":0},"generated":{"line":517,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":517,"column":0},"generated":{"line":518,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":518,"column":0},"generated":{"line":519,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":519,"column":0},"generated":{"line":520,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":520,"column":0},"generated":{"line":521,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":521,"column":0},"generated":{"line":522,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":522,"column":0},"generated":{"line":523,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":523,"column":0},"generated":{"line":524,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":524,"column":0},"generated":{"line":525,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":525,"column":0},"generated":{"line":526,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":526,"column":0},"generated":{"line":527,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":527,"column":0},"generated":{"line":528,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":528,"column":0},"generated":{"line":529,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":529,"column":0},"generated":{"line":530,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":530,"column":0},"generated":{"line":531,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":531,"column":0},"generated":{"line":532,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":532,"column":0},"generated":{"line":533,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":533,"column":0},"generated":{"line":534,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":534,"column":0},"generated":{"line":535,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":535,"column":0},"generated":{"line":536,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":536,"column":0},"generated":{"line":537,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":537,"column":0},"generated":{"line":538,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":538,"column":0},"generated":{"line":539,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":539,"column":0},"generated":{"line":540,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":540,"column":0},"generated":{"line":541,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":541,"column":0},"generated":{"line":542,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":542,"column":0},"generated":{"line":543,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":543,"column":0},"generated":{"line":544,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":544,"column":0},"generated":{"line":545,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":545,"column":0},"generated":{"line":546,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":546,"column":0},"generated":{"line":547,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":547,"column":0},"generated":{"line":548,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":548,"column":0},"generated":{"line":549,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":549,"column":0},"generated":{"line":550,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":550,"column":0},"generated":{"line":551,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":551,"column":0},"generated":{"line":552,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":552,"column":0},"generated":{"line":553,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":553,"column":0},"generated":{"line":554,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":554,"column":0},"generated":{"line":555,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":555,"column":0},"generated":{"line":556,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":556,"column":0},"generated":{"line":557,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":557,"column":0},"generated":{"line":558,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":558,"column":0},"generated":{"line":559,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":559,"column":0},"generated":{"line":560,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":560,"column":0},"generated":{"line":561,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":561,"column":0},"generated":{"line":562,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":562,"column":0},"generated":{"line":563,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":563,"column":0},"generated":{"line":564,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":564,"column":0},"generated":{"line":565,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":565,"column":0},"generated":{"line":566,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":566,"column":0},"generated":{"line":567,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":567,"column":0},"generated":{"line":568,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":568,"column":0},"generated":{"line":569,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":569,"column":0},"generated":{"line":570,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":570,"column":0},"generated":{"line":571,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":571,"column":0},"generated":{"line":572,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":572,"column":0},"generated":{"line":573,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":573,"column":0},"generated":{"line":574,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":574,"column":0},"generated":{"line":575,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":575,"column":0},"generated":{"line":576,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":576,"column":0},"generated":{"line":577,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":577,"column":0},"generated":{"line":578,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":578,"column":0},"generated":{"line":579,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":579,"column":0},"generated":{"line":580,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":580,"column":0},"generated":{"line":581,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":581,"column":0},"generated":{"line":582,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":582,"column":0},"generated":{"line":583,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":583,"column":0},"generated":{"line":584,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":584,"column":0},"generated":{"line":585,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":585,"column":0},"generated":{"line":586,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":586,"column":0},"generated":{"line":587,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":587,"column":0},"generated":{"line":588,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":588,"column":0},"generated":{"line":589,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":589,"column":0},"generated":{"line":590,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":590,"column":0},"generated":{"line":591,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":591,"column":0},"generated":{"line":592,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":592,"column":0},"generated":{"line":593,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":593,"column":0},"generated":{"line":594,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":594,"column":0},"generated":{"line":595,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":595,"column":0},"generated":{"line":596,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":596,"column":0},"generated":{"line":597,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":597,"column":0},"generated":{"line":598,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":598,"column":0},"generated":{"line":599,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":599,"column":0},"generated":{"line":600,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":600,"column":0},"generated":{"line":601,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":601,"column":0},"generated":{"line":602,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":602,"column":0},"generated":{"line":603,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":603,"column":0},"generated":{"line":604,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":604,"column":0},"generated":{"line":605,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":605,"column":0},"generated":{"line":606,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":606,"column":0},"generated":{"line":607,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":607,"column":0},"generated":{"line":608,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":608,"column":0},"generated":{"line":609,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":609,"column":0},"generated":{"line":610,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":610,"column":0},"generated":{"line":611,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":611,"column":0},"generated":{"line":612,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":612,"column":0},"generated":{"line":613,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":613,"column":0},"generated":{"line":614,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":614,"column":0},"generated":{"line":615,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":615,"column":0},"generated":{"line":616,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":616,"column":0},"generated":{"line":617,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":617,"column":0},"generated":{"line":618,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":618,"column":0},"generated":{"line":619,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":619,"column":0},"generated":{"line":620,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":620,"column":0},"generated":{"line":621,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":621,"column":0},"generated":{"line":622,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":622,"column":0},"generated":{"line":623,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":623,"column":0},"generated":{"line":624,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":624,"column":0},"generated":{"line":625,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":625,"column":0},"generated":{"line":626,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":626,"column":0},"generated":{"line":627,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":627,"column":0},"generated":{"line":628,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":628,"column":0},"generated":{"line":629,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":629,"column":0},"generated":{"line":630,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":630,"column":0},"generated":{"line":631,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":631,"column":0},"generated":{"line":632,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":632,"column":0},"generated":{"line":633,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":633,"column":0},"generated":{"line":634,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":634,"column":0},"generated":{"line":635,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":635,"column":0},"generated":{"line":636,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":636,"column":0},"generated":{"line":637,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":637,"column":0},"generated":{"line":638,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":638,"column":0},"generated":{"line":639,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":639,"column":0},"generated":{"line":640,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":640,"column":0},"generated":{"line":641,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":641,"column":0},"generated":{"line":642,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":642,"column":0},"generated":{"line":643,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":643,"column":0},"generated":{"line":644,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":644,"column":0},"generated":{"line":645,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":645,"column":0},"generated":{"line":646,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":646,"column":0},"generated":{"line":647,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":647,"column":0},"generated":{"line":648,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":648,"column":0},"generated":{"line":649,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":649,"column":0},"generated":{"line":650,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":650,"column":0},"generated":{"line":651,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":651,"column":0},"generated":{"line":652,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":652,"column":0},"generated":{"line":653,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":653,"column":0},"generated":{"line":654,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":654,"column":0},"generated":{"line":655,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":655,"column":0},"generated":{"line":656,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":656,"column":0},"generated":{"line":657,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":657,"column":0},"generated":{"line":658,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":658,"column":0},"generated":{"line":659,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":659,"column":0},"generated":{"line":660,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":660,"column":0},"generated":{"line":661,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":661,"column":0},"generated":{"line":662,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":662,"column":0},"generated":{"line":663,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":663,"column":0},"generated":{"line":664,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":664,"column":0},"generated":{"line":665,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":665,"column":0},"generated":{"line":666,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":666,"column":0},"generated":{"line":667,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":667,"column":0},"generated":{"line":668,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":668,"column":0},"generated":{"line":669,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":669,"column":0},"generated":{"line":670,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":670,"column":0},"generated":{"line":671,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":671,"column":0},"generated":{"line":672,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":672,"column":0},"generated":{"line":673,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":673,"column":0},"generated":{"line":674,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":674,"column":0},"generated":{"line":675,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":675,"column":0},"generated":{"line":676,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":676,"column":0},"generated":{"line":677,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":677,"column":0},"generated":{"line":678,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":678,"column":0},"generated":{"line":679,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":679,"column":0},"generated":{"line":680,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":680,"column":0},"generated":{"line":681,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":681,"column":0},"generated":{"line":682,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":682,"column":0},"generated":{"line":683,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":683,"column":0},"generated":{"line":684,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":684,"column":0},"generated":{"line":685,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":685,"column":0},"generated":{"line":686,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":686,"column":0},"generated":{"line":687,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":687,"column":0},"generated":{"line":688,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":688,"column":0},"generated":{"line":689,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":689,"column":0},"generated":{"line":690,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":690,"column":0},"generated":{"line":691,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":691,"column":0},"generated":{"line":692,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":692,"column":0},"generated":{"line":693,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":693,"column":0},"generated":{"line":694,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":694,"column":0},"generated":{"line":695,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":695,"column":0},"generated":{"line":696,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":696,"column":0},"generated":{"line":697,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":697,"column":0},"generated":{"line":698,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":698,"column":0},"generated":{"line":699,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":699,"column":0},"generated":{"line":700,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":700,"column":0},"generated":{"line":701,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":701,"column":0},"generated":{"line":702,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":702,"column":0},"generated":{"line":703,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":703,"column":0},"generated":{"line":704,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":704,"column":0},"generated":{"line":705,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":705,"column":0},"generated":{"line":706,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":706,"column":0},"generated":{"line":707,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":707,"column":0},"generated":{"line":708,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":708,"column":0},"generated":{"line":709,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":709,"column":0},"generated":{"line":710,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":710,"column":0},"generated":{"line":711,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":711,"column":0},"generated":{"line":712,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":712,"column":0},"generated":{"line":713,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":713,"column":0},"generated":{"line":714,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":714,"column":0},"generated":{"line":715,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":715,"column":0},"generated":{"line":716,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":716,"column":0},"generated":{"line":717,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":717,"column":0},"generated":{"line":718,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":718,"column":0},"generated":{"line":719,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":719,"column":0},"generated":{"line":720,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":720,"column":0},"generated":{"line":721,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":721,"column":0},"generated":{"line":722,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":722,"column":0},"generated":{"line":723,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":723,"column":0},"generated":{"line":724,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":724,"column":0},"generated":{"line":725,"column":0}},{"source":"node_modules/yargs-parser/index.js","original":{"line":725,"column":0},"generated":{"line":726,"column":0}}],"sources":{"node_modules/yargs-parser/index.js":"var assign = require('lodash.assign')\nvar camelCase = require('camelcase')\nvar path = require('path')\nvar tokenizeArgString = require('./lib/tokenize-arg-string')\nvar util = require('util')\n\nfunction parse (args, opts) {\n  if (!opts) opts = {}\n  // allow a string argument to be passed in rather\n  // than an argv array.\n  args = tokenizeArgString(args)\n  // aliases might have transitive relationships, normalize this.\n  var aliases = combineAliases(opts.alias || {})\n  var configuration = assign({}, {\n    'short-option-groups': true,\n    'camel-case-expansion': true,\n    'dot-notation': true,\n    'parse-numbers': true,\n    'boolean-negation': true\n  }, opts.configuration)\n  var defaults = opts.default || {}\n  var configObjects = opts.configObjects || []\n  var envPrefix = opts.envPrefix\n  var newAliases = {}\n  // allow a i18n handler to be passed in, default to a fake one (util.format).\n  var __ = opts.__ || function (str) {\n    return util.format.apply(util, Array.prototype.slice.call(arguments))\n  }\n  var error = null\n  var flags = {\n    aliases: {},\n    arrays: {},\n    bools: {},\n    strings: {},\n    numbers: {},\n    counts: {},\n    normalize: {},\n    configs: {},\n    defaulted: {},\n    nargs: {},\n    coercions: {}\n  }\n  var negative = /^-[0-9]+(\\.[0-9]+)?/\n\n  ;[].concat(opts.array).filter(Boolean).forEach(function (key) {\n    flags.arrays[key] = true\n  })\n\n  ;[].concat(opts.boolean).filter(Boolean).forEach(function (key) {\n    flags.bools[key] = true\n  })\n\n  ;[].concat(opts.string).filter(Boolean).forEach(function (key) {\n    flags.strings[key] = true\n  })\n\n  ;[].concat(opts.number).filter(Boolean).forEach(function (key) {\n    flags.numbers[key] = true\n  })\n\n  ;[].concat(opts.count).filter(Boolean).forEach(function (key) {\n    flags.counts[key] = true\n  })\n\n  ;[].concat(opts.normalize).filter(Boolean).forEach(function (key) {\n    flags.normalize[key] = true\n  })\n\n  Object.keys(opts.narg || {}).forEach(function (k) {\n    flags.nargs[k] = opts.narg[k]\n  })\n\n  Object.keys(opts.coerce || {}).forEach(function (k) {\n    flags.coercions[k] = opts.coerce[k]\n  })\n\n  if (Array.isArray(opts.config) || typeof opts.config === 'string') {\n    ;[].concat(opts.config).filter(Boolean).forEach(function (key) {\n      flags.configs[key] = true\n    })\n  } else {\n    Object.keys(opts.config || {}).forEach(function (k) {\n      flags.configs[k] = opts.config[k]\n    })\n  }\n\n  // create a lookup table that takes into account all\n  // combinations of aliases: {f: ['foo'], foo: ['f']}\n  extendAliases(opts.key, aliases, opts.default, flags.arrays)\n\n  // apply default values to all aliases.\n  Object.keys(defaults).forEach(function (key) {\n    (flags.aliases[key] || []).forEach(function (alias) {\n      defaults[alias] = defaults[key]\n    })\n  })\n\n  var argv = { _: [] }\n\n  Object.keys(flags.bools).forEach(function (key) {\n    setArg(key, !(key in defaults) ? false : defaults[key])\n    setDefaulted(key)\n  })\n\n  var notFlags = []\n  if (args.indexOf('--') !== -1) {\n    notFlags = args.slice(args.indexOf('--') + 1)\n    args = args.slice(0, args.indexOf('--'))\n  }\n\n  for (var i = 0; i < args.length; i++) {\n    var arg = args[i]\n    var broken\n    var key\n    var letters\n    var m\n    var next\n    var value\n\n    // -- seperated by =\n    if (arg.match(/^--.+=/) || (\n      !configuration['short-option-groups'] && arg.match(/^-.+=/)\n    )) {\n      // Using [\\s\\S] instead of . because js doesn't support the\n      // 'dotall' regex modifier. See:\n      // http://stackoverflow.com/a/1068308/13216\n      m = arg.match(/^--?([^=]+)=([\\s\\S]*)$/)\n\n      // nargs format = '--f=monkey washing cat'\n      if (checkAllAliases(m[1], flags.nargs)) {\n        args.splice(i + 1, 0, m[2])\n        i = eatNargs(i, m[1], args)\n      // arrays format = '--f=a b c'\n      } else if (checkAllAliases(m[1], flags.arrays) && args.length > i + 1) {\n        args.splice(i + 1, 0, m[2])\n        i = eatArray(i, m[1], args)\n      } else {\n        setArg(m[1], m[2])\n      }\n    } else if (arg.match(/^--no-.+/) && configuration['boolean-negation']) {\n      key = arg.match(/^--no-(.+)/)[1]\n      setArg(key, false)\n\n    // -- seperated by space.\n    } else if (arg.match(/^--.+/) || (\n      !configuration['short-option-groups'] && arg.match(/^-.+/)\n    )) {\n      key = arg.match(/^--?(.+)/)[1]\n\n      // nargs format = '--foo a b c'\n      if (checkAllAliases(key, flags.nargs)) {\n        i = eatNargs(i, key, args)\n      // array format = '--foo a b c'\n      } else if (checkAllAliases(key, flags.arrays) && args.length > i + 1) {\n        i = eatArray(i, key, args)\n      } else {\n        next = args[i + 1]\n\n        if (next !== undefined && (!next.match(/^-/) ||\n          next.match(negative)) &&\n          !checkAllAliases(key, flags.bools) &&\n          !checkAllAliases(key, flags.counts)) {\n          setArg(key, next)\n          i++\n        } else if (/^(true|false)$/.test(next)) {\n          setArg(key, next)\n          i++\n        } else {\n          setArg(key, defaultForType(guessType(key, flags)))\n        }\n      }\n\n    // dot-notation flag seperated by '='.\n    } else if (arg.match(/^-.\\..+=/)) {\n      m = arg.match(/^-([^=]+)=([\\s\\S]*)$/)\n      setArg(m[1], m[2])\n\n    // dot-notation flag seperated by space.\n    } else if (arg.match(/^-.\\..+/)) {\n      next = args[i + 1]\n      key = arg.match(/^-(.\\..+)/)[1]\n\n      if (next !== undefined && !next.match(/^-/) &&\n        !checkAllAliases(key, flags.bools) &&\n        !checkAllAliases(key, flags.counts)) {\n        setArg(key, next)\n        i++\n      } else {\n        setArg(key, defaultForType(guessType(key, flags)))\n      }\n    } else if (arg.match(/^-[^-]+/) && !arg.match(negative)) {\n      letters = arg.slice(1, -1).split('')\n      broken = false\n\n      for (var j = 0; j < letters.length; j++) {\n        next = arg.slice(j + 2)\n\n        if (letters[j + 1] && letters[j + 1] === '=') {\n          value = arg.slice(j + 3)\n          key = letters[j]\n\n          // nargs format = '-f=monkey washing cat'\n          if (checkAllAliases(key, flags.nargs)) {\n            args.splice(i + 1, 0, value)\n            i = eatNargs(i, key, args)\n          // array format = '-f=a b c'\n          } else if (checkAllAliases(key, flags.arrays) && args.length > i + 1) {\n            args.splice(i + 1, 0, value)\n            i = eatArray(i, key, args)\n          } else {\n            setArg(key, value)\n          }\n\n          broken = true\n          break\n        }\n\n        if (next === '-') {\n          setArg(letters[j], next)\n          continue\n        }\n\n        // current letter is an alphabetic character and next value is a number\n        if (/[A-Za-z]/.test(letters[j]) &&\n          /^-?\\d+(\\.\\d*)?(e-?\\d+)?$/.test(next)) {\n          setArg(letters[j], next)\n          broken = true\n          break\n        }\n\n        if (letters[j + 1] && letters[j + 1].match(/\\W/)) {\n          setArg(letters[j], next)\n          broken = true\n          break\n        } else {\n          setArg(letters[j], defaultForType(guessType(letters[j], flags)))\n        }\n      }\n\n      key = arg.slice(-1)[0]\n\n      if (!broken && key !== '-') {\n        // nargs format = '-f a b c'\n        if (checkAllAliases(key, flags.nargs)) {\n          i = eatNargs(i, key, args)\n        // array format = '-f a b c'\n        } else if (checkAllAliases(key, flags.arrays) && args.length > i + 1) {\n          i = eatArray(i, key, args)\n        } else {\n          next = args[i + 1]\n\n          if (next !== undefined && (!/^(-|--)[^-]/.test(next) ||\n            next.match(negative)) &&\n            !checkAllAliases(key, flags.bools) &&\n            !checkAllAliases(key, flags.counts)) {\n            setArg(key, next)\n            i++\n          } else if (/^(true|false)$/.test(next)) {\n            setArg(key, next)\n            i++\n          } else {\n            setArg(key, defaultForType(guessType(key, flags)))\n          }\n        }\n      }\n    } else {\n      argv._.push(\n        flags.strings['_'] || !isNumber(arg) ? arg : Number(arg)\n      )\n    }\n  }\n\n  // order of precedence:\n  // 1. command line arg\n  // 2. value from config file\n  // 3. value from config objects\n  // 4. value from env var\n  // 5. configured default value\n  applyEnvVars(argv, true) // special case: check env vars that point to config file\n  setConfig(argv)\n  setConfigObjects()\n  applyEnvVars(argv, false)\n  applyArrayCoercions(argv)\n  applyDefaultsAndAliases(argv, flags.aliases, defaults)\n\n  // for any counts either not in args or without an explicit default, set to 0\n  Object.keys(flags.counts).forEach(function (key) {\n    if (!hasKey(argv, key.split('.'))) setArg(key, 0)\n  })\n\n  notFlags.forEach(function (key) {\n    argv._.push(key)\n  })\n\n  // how many arguments should we consume, based\n  // on the nargs option?\n  function eatNargs (i, key, args) {\n    var toEat = checkAllAliases(key, flags.nargs)\n\n    if (args.length - (i + 1) < toEat) error = Error(__('Not enough arguments following: %s', key))\n\n    for (var ii = i + 1; ii < (toEat + i + 1); ii++) {\n      setArg(key, args[ii])\n    }\n\n    return (i + toEat)\n  }\n\n  // if an option is an array, eat all non-hyphenated arguments\n  // following it... YUM!\n  // e.g., --foo apple banana cat becomes [\"apple\", \"banana\", \"cat\"]\n  function eatArray (i, key, args) {\n    var start = i + 1\n    for (var ii = i + 1; ii < args.length; ii++) {\n      if (/^-/.test(args[ii]) && !negative.test(args[ii])) {\n        if (ii === start) {\n          setArg(key, defaultForType('array'))\n        }\n        break\n      }\n      i = ii\n      setArg(key, args[ii])\n    }\n\n    return i\n  }\n\n  function setArg (key, val) {\n    unsetDefaulted(key)\n\n    // handle parsing boolean arguments --foo=true --bar false.\n    if (checkAllAliases(key, flags.bools) || checkAllAliases(key, flags.counts)) {\n      if (typeof val === 'string') val = val === 'true'\n    }\n\n    if (/-/.test(key) && !(flags.aliases[key] && flags.aliases[key].length) && configuration['camel-case-expansion']) {\n      var c = camelCase(key)\n      flags.aliases[key] = [c]\n      newAliases[c] = true\n    }\n\n    var value = val\n    if (!checkAllAliases(key, flags.strings) && !checkAllAliases(key, flags.coercions)) {\n      if (isNumber(val)) value = Number(val)\n      if (!isUndefined(val) && !isNumber(val) && checkAllAliases(key, flags.numbers)) value = NaN\n    }\n\n    // increment a count given as arg (either no value or value parsed as boolean)\n    if (checkAllAliases(key, flags.counts) && (isUndefined(value) || typeof value === 'boolean')) {\n      value = increment\n    }\n\n    // Set normalized value when key is in 'normalize' and in 'arrays'\n    if (checkAllAliases(key, flags.normalize) && checkAllAliases(key, flags.arrays)) {\n      if (Array.isArray(val)) value = val.map(path.normalize)\n      else value = path.normalize(val)\n    }\n\n    var splitKey = key.split('.')\n    setKey(argv, splitKey, value)\n\n    // handle populating aliases of the full key\n    if (flags.aliases[key]) {\n      flags.aliases[key].forEach(function (x) {\n        x = x.split('.')\n        setKey(argv, x, value)\n      })\n    }\n\n    // handle populating aliases of the first element of the dot-notation key\n    if (splitKey.length > 1 && configuration['dot-notation']) {\n      ;(flags.aliases[splitKey[0]] || []).forEach(function (x) {\n        x = x.split('.')\n\n        // expand alias with nested objects in key\n        var a = [].concat(splitKey)\n        a.shift() // nuke the old key.\n        x = x.concat(a)\n\n        setKey(argv, x, value)\n      })\n    }\n\n    // Set normalize getter and setter when key is in 'normalize' but isn't an array\n    if (checkAllAliases(key, flags.normalize) && !checkAllAliases(key, flags.arrays)) {\n      var keys = [key].concat(flags.aliases[key] || [])\n      keys.forEach(function (key) {\n        argv.__defineSetter__(key, function (v) {\n          val = path.normalize(v)\n        })\n\n        argv.__defineGetter__(key, function () {\n          return typeof val === 'string' ? path.normalize(val) : val\n        })\n      })\n    }\n  }\n\n  // set args from config.json file, this should be\n  // applied last so that defaults can be applied.\n  function setConfig (argv) {\n    var configLookup = {}\n\n    // expand defaults/aliases, in-case any happen to reference\n    // the config.json file.\n    applyDefaultsAndAliases(configLookup, flags.aliases, defaults)\n\n    Object.keys(flags.configs).forEach(function (configKey) {\n      var configPath = argv[configKey] || configLookup[configKey]\n      if (configPath) {\n        try {\n          var config = null\n          var resolvedConfigPath = path.resolve(process.cwd(), configPath)\n\n          if (typeof flags.configs[configKey] === 'function') {\n            try {\n              config = flags.configs[configKey](resolvedConfigPath)\n            } catch (e) {\n              config = e\n            }\n            if (config instanceof Error) {\n              error = config\n              return\n            }\n          } else {\n            config = require(resolvedConfigPath)\n          }\n\n          setConfigObject(config)\n        } catch (ex) {\n          if (argv[configKey]) error = Error(__('Invalid JSON config file: %s', configPath))\n        }\n      }\n    })\n  }\n\n  // set args from config object.\n  // it recursively checks nested objects.\n  function setConfigObject (config, prev) {\n    Object.keys(config).forEach(function (key) {\n      var value = config[key]\n      var fullKey = prev ? prev + '.' + key : key\n\n      if (Object.prototype.toString.call(value) === '[object Object]') {\n        // if the value is an object but not an array, check nested object\n        setConfigObject(value, fullKey)\n      } else {\n        // setting arguments via CLI takes precedence over\n        // values within the config file.\n        if (!hasKey(argv, fullKey.split('.')) || (flags.defaulted[fullKey])) {\n          setArg(fullKey, value)\n        }\n      }\n    })\n  }\n\n  // set all config objects passed in opts\n  function setConfigObjects () {\n    if (typeof configObjects === 'undefined') return\n    configObjects.forEach(function (configObject) {\n      setConfigObject(configObject)\n    })\n  }\n\n  function applyEnvVars (argv, configOnly) {\n    if (typeof envPrefix === 'undefined') return\n\n    var prefix = typeof envPrefix === 'string' ? envPrefix : ''\n    Object.keys(process.env).forEach(function (envVar) {\n      if (prefix === '' || envVar.lastIndexOf(prefix, 0) === 0) {\n        // get array of nested keys and convert them to camel case\n        var keys = envVar.split('__').map(function (key, i) {\n          if (i === 0) {\n            key = key.substring(prefix.length)\n          }\n          return camelCase(key)\n        })\n\n        if (((configOnly && flags.configs[keys.join('.')]) || !configOnly) && (!hasKey(argv, keys) || flags.defaulted[keys.join('.')])) {\n          setArg(keys.join('.'), process.env[envVar])\n        }\n      }\n    })\n  }\n\n  function applyArrayCoercions (argv) {\n    var coerce\n    Object.keys(argv).filter(function (key) {\n      return key === '_' || checkAllAliases(key, flags.arrays)\n    }).forEach(function (key) {\n      coerce = checkAllAliases(key, flags.coercions)\n      if (typeof coerce === 'function') {\n        try {\n          argv[key] = coerce(argv[key])\n        } catch (err) {\n          error = err\n        }\n      }\n    })\n  }\n\n  function applyDefaultsAndAliases (obj, aliases, defaults) {\n    Object.keys(defaults).forEach(function (key) {\n      if (!hasKey(obj, key.split('.'))) {\n        setKey(obj, key.split('.'), defaults[key])\n\n        ;(aliases[key] || []).forEach(function (x) {\n          if (hasKey(obj, x.split('.'))) return\n          setKey(obj, x.split('.'), defaults[key])\n        })\n      }\n    })\n  }\n\n  function hasKey (obj, keys) {\n    var o = obj\n\n    if (!configuration['dot-notation']) keys = [keys.join('.')]\n\n    keys.slice(0, -1).forEach(function (key) {\n      o = (o[key] || {})\n    })\n\n    var key = keys[keys.length - 1]\n\n    if (typeof o !== 'object') return false\n    else return key in o\n  }\n\n  function setKey (obj, keys, value) {\n    var o = obj\n\n    if (!configuration['dot-notation']) keys = [keys.join('.')]\n\n    keys.slice(0, -1).forEach(function (key) {\n      if (o[key] === undefined) o[key] = {}\n      o = o[key]\n    })\n\n    var key = keys[keys.length - 1]\n    var coerce = !checkAllAliases(key, flags.arrays) && checkAllAliases(key, flags.coercions)\n    if (typeof coerce === 'function') {\n      try {\n        value = coerce(value)\n      } catch (err) {\n        error = err\n      }\n    }\n\n    if (value === increment) {\n      o[key] = increment(o[key])\n    } else if (o[key] === undefined && checkAllAliases(key, flags.arrays)) {\n      o[key] = Array.isArray(value) ? value : [value]\n    } else if (o[key] === undefined || checkAllAliases(key, flags.bools) || checkAllAliases(key, flags.counts)) {\n      o[key] = value\n    } else if (Array.isArray(o[key])) {\n      o[key].push(value)\n    } else {\n      o[key] = [ o[key], value ]\n    }\n  }\n\n  // extend the aliases list with inferred aliases.\n  function extendAliases () {\n    Array.prototype.slice.call(arguments).forEach(function (obj) {\n      Object.keys(obj || {}).forEach(function (key) {\n        // short-circuit if we've already added a key\n        // to the aliases array, for example it might\n        // exist in both 'opts.default' and 'opts.key'.\n        if (flags.aliases[key]) return\n\n        flags.aliases[key] = [].concat(aliases[key] || [])\n        // For \"--option-name\", also set argv.optionName\n        flags.aliases[key].concat(key).forEach(function (x) {\n          if (/-/.test(x) && configuration['camel-case-expansion']) {\n            var c = camelCase(x)\n            flags.aliases[key].push(c)\n            newAliases[c] = true\n          }\n        })\n        flags.aliases[key].forEach(function (x) {\n          flags.aliases[x] = [key].concat(flags.aliases[key].filter(function (y) {\n            return x !== y\n          }))\n        })\n      })\n    })\n  }\n\n  // check if a flag is set for any of a key's aliases.\n  function checkAllAliases (key, flag) {\n    var isSet = false\n    var toCheck = [].concat(flags.aliases[key] || [], key)\n\n    toCheck.forEach(function (key) {\n      if (flag[key]) isSet = flag[key]\n    })\n\n    return isSet\n  }\n\n  function setDefaulted (key) {\n    [].concat(flags.aliases[key] || [], key).forEach(function (k) {\n      flags.defaulted[k] = true\n    })\n  }\n\n  function unsetDefaulted (key) {\n    [].concat(flags.aliases[key] || [], key).forEach(function (k) {\n      delete flags.defaulted[k]\n    })\n  }\n\n  // return a default value, given the type of a flag.,\n  // e.g., key of type 'string' will default to '', rather than 'true'.\n  function defaultForType (type) {\n    var def = {\n      boolean: true,\n      string: '',\n      number: undefined,\n      array: []\n    }\n\n    return def[type]\n  }\n\n  // given a flag, enforce a default type.\n  function guessType (key, flags) {\n    var type = 'boolean'\n\n    if (checkAllAliases(key, flags.strings)) type = 'string'\n    else if (checkAllAliases(key, flags.numbers)) type = 'number'\n    else if (checkAllAliases(key, flags.arrays)) type = 'array'\n\n    return type\n  }\n\n  function isNumber (x) {\n    if (!configuration['parse-numbers']) return false\n    if (typeof x === 'number') return true\n    if (/^0x[0-9a-f]+$/i.test(x)) return true\n    return /^[-+]?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(e[-+]?\\d+)?$/.test(x)\n  }\n\n  function isUndefined (num) {\n    return num === undefined\n  }\n\n  return {\n    argv: argv,\n    error: error,\n    aliases: flags.aliases,\n    newAliases: newAliases,\n    configuration: configuration\n  }\n}\n\n// if any aliases reference each other, we should\n// merge them together.\nfunction combineAliases (aliases) {\n  var aliasArrays = []\n  var change = true\n  var combined = {}\n\n  // turn alias lookup hash {key: ['alias1', 'alias2']} into\n  // a simple array ['key', 'alias1', 'alias2']\n  Object.keys(aliases).forEach(function (key) {\n    aliasArrays.push(\n      [].concat(aliases[key], key)\n    )\n  })\n\n  // combine arrays until zero changes are\n  // made in an iteration.\n  while (change) {\n    change = false\n    for (var i = 0; i < aliasArrays.length; i++) {\n      for (var ii = i + 1; ii < aliasArrays.length; ii++) {\n        var intersect = aliasArrays[i].filter(function (v) {\n          return aliasArrays[ii].indexOf(v) !== -1\n        })\n\n        if (intersect.length) {\n          aliasArrays[i] = aliasArrays[i].concat(aliasArrays[ii])\n          aliasArrays.splice(ii, 1)\n          change = true\n          break\n        }\n      }\n    }\n  }\n\n  // map arrays back to the hash-lookup (de-dupe while\n  // we're at it).\n  aliasArrays.forEach(function (aliasArray) {\n    aliasArray = aliasArray.filter(function (v, i, self) {\n      return self.indexOf(v) === i\n    })\n    combined[aliasArray.pop()] = aliasArray\n  })\n\n  return combined\n}\n\n// this function should only be called when a count is given as an arg\n// it is NOT called to set a default value\n// thus we can start the count at 1 instead of 0\nfunction increment (orig) {\n  return orig !== undefined ? orig + 1 : 1\n}\n\nfunction Parser (args, opts) {\n  var result = parse(args.slice(), opts)\n\n  return result.argv\n}\n\n// parse arguments and return detailed\n// meta information, aliases, etc.\nParser.detailed = function (args, opts) {\n  return parse(args.slice(), opts)\n}\n\nmodule.exports = Parser\n"},"lineCount":726}},"hash":"7fe48504e9dffb330a7f8fa4234185a4","cacheData":{"env":{}}}