{"id":"node_modules/yargs-parser/lib/tokenize-arg-string.js","dependencies":[{"name":"/Users/rudraaiyar/Documents/hciui/package.json","includedInParent":true,"mtime":1541009997000},{"name":"/Users/rudraaiyar/Documents/hciui/node_modules/yargs-parser/package.json","includedInParent":true,"mtime":1541009984000}],"generated":{"js":"// take an un-split argv string and tokenize it.\nmodule.exports = function (argString) {\n  if (Array.isArray(argString)) return argString\n\n  var i = 0\n  var c = null\n  var opening = null\n  var args = []\n\n  for (var ii = 0; ii < argString.length; ii++) {\n    c = argString.charAt(ii)\n\n    // split on spaces unless we're in quotes.\n    if (c === ' ' && !opening) {\n      i++\n      continue\n    }\n\n    // don't split the string if we're in matching\n    // opening or closing single and double quotes.\n    if (c === opening) {\n      opening = null\n      continue\n    } else if ((c === \"'\" || c === '\"') && !opening) {\n      opening = c\n      continue\n    }\n\n    if (!args[i]) args[i] = ''\n    args[i] += c\n  }\n\n  return args\n}\n","map":{"mappings":[{"source":"node_modules/yargs-parser/lib/tokenize-arg-string.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/yargs-parser/lib/tokenize-arg-string.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/yargs-parser/lib/tokenize-arg-string.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/yargs-parser/lib/tokenize-arg-string.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/yargs-parser/lib/tokenize-arg-string.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/yargs-parser/lib/tokenize-arg-string.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/yargs-parser/lib/tokenize-arg-string.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/yargs-parser/lib/tokenize-arg-string.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/yargs-parser/lib/tokenize-arg-string.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/yargs-parser/lib/tokenize-arg-string.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/yargs-parser/lib/tokenize-arg-string.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/yargs-parser/lib/tokenize-arg-string.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/yargs-parser/lib/tokenize-arg-string.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/yargs-parser/lib/tokenize-arg-string.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/yargs-parser/lib/tokenize-arg-string.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/yargs-parser/lib/tokenize-arg-string.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/yargs-parser/lib/tokenize-arg-string.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/yargs-parser/lib/tokenize-arg-string.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/yargs-parser/lib/tokenize-arg-string.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/yargs-parser/lib/tokenize-arg-string.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/yargs-parser/lib/tokenize-arg-string.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/yargs-parser/lib/tokenize-arg-string.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/yargs-parser/lib/tokenize-arg-string.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/yargs-parser/lib/tokenize-arg-string.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/yargs-parser/lib/tokenize-arg-string.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/yargs-parser/lib/tokenize-arg-string.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/yargs-parser/lib/tokenize-arg-string.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/yargs-parser/lib/tokenize-arg-string.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/yargs-parser/lib/tokenize-arg-string.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/yargs-parser/lib/tokenize-arg-string.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/yargs-parser/lib/tokenize-arg-string.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/yargs-parser/lib/tokenize-arg-string.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/yargs-parser/lib/tokenize-arg-string.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/yargs-parser/lib/tokenize-arg-string.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/yargs-parser/lib/tokenize-arg-string.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}}],"sources":{"node_modules/yargs-parser/lib/tokenize-arg-string.js":"// take an un-split argv string and tokenize it.\nmodule.exports = function (argString) {\n  if (Array.isArray(argString)) return argString\n\n  var i = 0\n  var c = null\n  var opening = null\n  var args = []\n\n  for (var ii = 0; ii < argString.length; ii++) {\n    c = argString.charAt(ii)\n\n    // split on spaces unless we're in quotes.\n    if (c === ' ' && !opening) {\n      i++\n      continue\n    }\n\n    // don't split the string if we're in matching\n    // opening or closing single and double quotes.\n    if (c === opening) {\n      opening = null\n      continue\n    } else if ((c === \"'\" || c === '\"') && !opening) {\n      opening = c\n      continue\n    }\n\n    if (!args[i]) args[i] = ''\n    args[i] += c\n  }\n\n  return args\n}\n"},"lineCount":35}},"hash":"00b95791d374b64f139abb72e4f59582","cacheData":{"env":{}}}