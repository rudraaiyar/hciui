{"id":"node_modules/spdx-expression-parse/parse.js","dependencies":[{"name":"/Users/rudraaiyar/Documents/hciui/package.json","includedInParent":true,"mtime":1541009997000},{"name":"/Users/rudraaiyar/Documents/hciui/node_modules/spdx-expression-parse/package.json","includedInParent":true,"mtime":1541009984000}],"generated":{"js":"'use strict'\n\n// The ABNF grammar in the spec is totally ambiguous.\n//\n// This parser follows the operator precedence defined in the\n// `Order of Precedence and Parentheses` section.\n\nmodule.exports = function (tokens) {\n  var index = 0\n\n  function hasMore () {\n    return index < tokens.length\n  }\n\n  function token () {\n    return hasMore() ? tokens[index] : null\n  }\n\n  function next () {\n    if (!hasMore()) {\n      throw new Error()\n    }\n    index++\n  }\n\n  function parseOperator (operator) {\n    var t = token()\n    if (t && t.type === 'OPERATOR' && operator === t.string) {\n      next()\n      return t.string\n    }\n  }\n\n  function parseWith () {\n    if (parseOperator('WITH')) {\n      var t = token()\n      if (t && t.type === 'EXCEPTION') {\n        next()\n        return t.string\n      }\n      throw new Error('Expected exception after `WITH`')\n    }\n  }\n\n  function parseLicenseRef () {\n    // TODO: Actually, everything is concatenated into one string\n    // for backward-compatibility but it could be better to return\n    // a nice structure.\n    var begin = index\n    var string = ''\n    var t = token()\n    if (t.type === 'DOCUMENTREF') {\n      next()\n      string += 'DocumentRef-' + t.string + ':'\n      if (!parseOperator(':')) {\n        throw new Error('Expected `:` after `DocumentRef-...`')\n      }\n    }\n    t = token()\n    if (t.type === 'LICENSEREF') {\n      next()\n      string += 'LicenseRef-' + t.string\n      return {license: string}\n    }\n    index = begin\n  }\n\n  function parseLicense () {\n    var t = token()\n    if (t && t.type === 'LICENSE') {\n      next()\n      var node = {license: t.string}\n      if (parseOperator('+')) {\n        node.plus = true\n      }\n      var exception = parseWith()\n      if (exception) {\n        node.exception = exception\n      }\n      return node\n    }\n  }\n\n  function parseParenthesizedExpression () {\n    var left = parseOperator('(')\n    if (!left) {\n      return\n    }\n\n    var expr = parseExpression()\n\n    if (!parseOperator(')')) {\n      throw new Error('Expected `)`')\n    }\n\n    return expr\n  }\n\n  function parseAtom () {\n    return (\n      parseParenthesizedExpression() ||\n      parseLicenseRef() ||\n      parseLicense()\n    )\n  }\n\n  function makeBinaryOpParser (operator, nextParser) {\n    return function parseBinaryOp () {\n      var left = nextParser()\n      if (!left) {\n        return\n      }\n\n      if (!parseOperator(operator)) {\n        return left\n      }\n\n      var right = parseBinaryOp()\n      if (!right) {\n        throw new Error('Expected expression')\n      }\n      return {\n        left: left,\n        conjunction: operator.toLowerCase(),\n        right: right\n      }\n    }\n  }\n\n  var parseAnd = makeBinaryOpParser('AND', parseAtom)\n  var parseExpression = makeBinaryOpParser('OR', parseAnd)\n\n  var node = parseExpression()\n  if (!node || hasMore()) {\n    throw new Error('Syntax error')\n  }\n  return node\n}\n","map":{"mappings":[{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/spdx-expression-parse/parse.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}}],"sources":{"node_modules/spdx-expression-parse/parse.js":"'use strict'\n\n// The ABNF grammar in the spec is totally ambiguous.\n//\n// This parser follows the operator precedence defined in the\n// `Order of Precedence and Parentheses` section.\n\nmodule.exports = function (tokens) {\n  var index = 0\n\n  function hasMore () {\n    return index < tokens.length\n  }\n\n  function token () {\n    return hasMore() ? tokens[index] : null\n  }\n\n  function next () {\n    if (!hasMore()) {\n      throw new Error()\n    }\n    index++\n  }\n\n  function parseOperator (operator) {\n    var t = token()\n    if (t && t.type === 'OPERATOR' && operator === t.string) {\n      next()\n      return t.string\n    }\n  }\n\n  function parseWith () {\n    if (parseOperator('WITH')) {\n      var t = token()\n      if (t && t.type === 'EXCEPTION') {\n        next()\n        return t.string\n      }\n      throw new Error('Expected exception after `WITH`')\n    }\n  }\n\n  function parseLicenseRef () {\n    // TODO: Actually, everything is concatenated into one string\n    // for backward-compatibility but it could be better to return\n    // a nice structure.\n    var begin = index\n    var string = ''\n    var t = token()\n    if (t.type === 'DOCUMENTREF') {\n      next()\n      string += 'DocumentRef-' + t.string + ':'\n      if (!parseOperator(':')) {\n        throw new Error('Expected `:` after `DocumentRef-...`')\n      }\n    }\n    t = token()\n    if (t.type === 'LICENSEREF') {\n      next()\n      string += 'LicenseRef-' + t.string\n      return {license: string}\n    }\n    index = begin\n  }\n\n  function parseLicense () {\n    var t = token()\n    if (t && t.type === 'LICENSE') {\n      next()\n      var node = {license: t.string}\n      if (parseOperator('+')) {\n        node.plus = true\n      }\n      var exception = parseWith()\n      if (exception) {\n        node.exception = exception\n      }\n      return node\n    }\n  }\n\n  function parseParenthesizedExpression () {\n    var left = parseOperator('(')\n    if (!left) {\n      return\n    }\n\n    var expr = parseExpression()\n\n    if (!parseOperator(')')) {\n      throw new Error('Expected `)`')\n    }\n\n    return expr\n  }\n\n  function parseAtom () {\n    return (\n      parseParenthesizedExpression() ||\n      parseLicenseRef() ||\n      parseLicense()\n    )\n  }\n\n  function makeBinaryOpParser (operator, nextParser) {\n    return function parseBinaryOp () {\n      var left = nextParser()\n      if (!left) {\n        return\n      }\n\n      if (!parseOperator(operator)) {\n        return left\n      }\n\n      var right = parseBinaryOp()\n      if (!right) {\n        throw new Error('Expected expression')\n      }\n      return {\n        left: left,\n        conjunction: operator.toLowerCase(),\n        right: right\n      }\n    }\n  }\n\n  var parseAnd = makeBinaryOpParser('AND', parseAtom)\n  var parseExpression = makeBinaryOpParser('OR', parseAnd)\n\n  var node = parseExpression()\n  if (!node || hasMore()) {\n    throw new Error('Syntax error')\n  }\n  return node\n}\n"},"lineCount":139}},"hash":"0fd334ef256664689b8d882a5d79dc80","cacheData":{"env":{}}}